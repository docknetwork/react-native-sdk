
import {RelayService} from '../lib';
import { didcommDecrypt, getAgreementKeydocFromDidDocument, getDerivedAgreementKey, getKaKInstanceFromDocument } from '../lib/didcomm';
import {ALICE_KEY_PAIR_DOC, BOB_KEY_PAIR_DOC} from './mock-data';


describe('DIDComm', () => {
  it('expect to decrypt didcomm message', async () => {
    const encryptedMessage = `eyJ0eXAiOiJhcHBsaWNhdGlvbi9kaWRjb21tLWVuY3J5cHRlZCtqc29uIiwicHJvdGVjdGVkIjoiZXlKbGJtTWlPaUpZUXpJd1VDSjkiLCJyZWNpcGllbnRzIjpbeyJoZWFkZXIiOnsia2lkIjoiZGlkOmtleTp6Nk1raE43UEJqV2dTTVEyNEJlYmRwdnZ3OGZWUnY3bTZNSERxaXdUS296ekJnckojejZMU29qOXpqWmhBcDdNUFFjUndDMnludUJYdXk5YkVnVks1aDNzVFo5c01nMUdtIiwiYWxnIjoiRUNESC0xUFUrQTI1NktXIiwiZXBrIjp7Imt0eSI6Ik9LUCIsImNydiI6IlgyNTUxOSIsIngiOiI3Q0FSVDY0akx0eXpqOGtmTDdUc2VxaU4tM2JhUzkzTjN4d010MFhKTXlzIn0sImFwdSI6IlpHbGtPbVJ2WTJzNk5VWm9ibEYyUzFkRVpVRm1SVkZaYVRoa1RFNXROV05uTlhkdk9VVkJVbk4zYW10M2NWaDBSMFpVZFcxUlJEbFlJM28yVEZOeWNEZFNRa2h2TXpkMmVYWlhaV3BuUzNOMk5uSldWSGxMUVVkaVdXaG1PRTF1T1RjNGQza3pUbmc1VkEiLCJhcHYiOiJaR2xrT210bGVUcDZOazFyYUU0M1VFSnFWMmRUVFZFeU5FSmxZbVJ3ZG5aM09HWldVblkzYlRaTlNFUnhhWGRVUzI5NmVrSm5ja29qZWpaTVUyOXFPWHBxV21oQmNEZE5VRkZqVW5kRE1ubHVkVUpZZFhrNVlrVm5Wa3MxYUROelZGbzVjMDFuTVVkdCIsInNraWQiOiJkaWQ6ZG9jazo1RmhuUXZLV0RlQWZFUVlpOGRMTm01Y2c1d285RUFSc3dqa3dxWHRHRlR1bVFEOVgjejZMU3JwN1JCSG8zN3Z5dldlamdLc3Y2clZUeUtBR2JZaGY4TW45Nzh3eTNOeDlUIn0sImVuY3J5cHRlZF9rZXkiOiJkLXpRVDZJSHN1dS1oUFRRYW1meVlDUnJnbjlkTUdfandVXzE3MUlxb2ltUVFibzdreThESGcifV0sIml2IjoiZlBFSmlTYnhra3JKb1FLclU1WllqNjJ4THowdEhBNHMiLCJjaXBoZXJ0ZXh0IjoiRUtvak9jVEpVdjRDNjUzUTkzNDBoMTBaaUh3VEpTSEJrOXlRMmJWd29EU3QySUMtWU1pdUcyQW9yMmowT21hRUpnUkRUbHlKSjVCMGd4X0JPX1FXdldyckFBcmJ6MTNacFcwalZBM0hZSVowN2gtcUpjYTBidGdSWnVIczc3ak5Yc2FHLXJCUWdQZE5BWnZBVjQ1ZkNoYmdXREFjWGxOLVQxaXlkdXF6TVZtdk1qdnI5ZHJndHllaGdENUtnMVkwd1BWMm9LekdHUkRsNC0zV3lIQ0V1b2d4ellNR3hqV1ZScmZIT0NfSUZ2UWhMTFhuSEZmc2lwbDc0MFZOUGNzREp1NDBYWndBTmJQREl2RG1PMDdFc0JvUWVaVWVtMUZ3Qm9HdTlyeUkwaWd2VFlvdExJM2JiazhpYVlmWjlfRUhQMnotZ25jRjQyd2dlRl9NOVZTT0dFOGxQeVViRDFmOTZBalZaclc2WWlYY0p4Z3RsZWtCVjU3MFdoYzRTRmloRDhCS0c1cUF3bkI0eUpTYXY3cl9QMVU1OGkzNkEyN2N0VGZFNnF3RVVmVU01dmd2X3VPbHlCQ2xGeFFLNGJRc2RZdmNMb3VNTnVsR0FLNVFDSGRzdEpxZmpUeEQyWm04YUVQc3lCV0xKSVJ1MXlza2ljajQtWTcyRlBDc2F1ZGlVTi1zMDVZOV84VHBVNFpvaUpYZGthOUkwU0FFWU5SSDd0SWhmb3c0R08wVlNsTEhKODN2ZU5sbzlkNDBHZmtVdTJGTFFTbE1BR0FtQmp0REdtV0VxeEJHZXJUb21CMEF3RUJwRzZwUlYzRmdLYlJQNG1FUERWcTRqMWZxWmVQS25OQ25YLUpSdHdCOEJZTHFtQlU3eE5xNGlhcE4xa0E2TzBLSTZSNVVHUU9id1gxNmlmMHY5a3Z2MHhyakVQbkxOMnZDOGJTNkQ5VG9rcXRnUjg4UUlSSTlpWlVCVFVLVFJFSFpDUUpjV1JqMHBiNGVXTFpKLUtQb2RVU0RaVUZWdFVWN29qNmIzRHJCcWF6M096N1h1TzdWbS10TFhXTS1yNjZjQWN4U1N3YUlEcFl1NXVCMnlrOE5ZYzItRy13cW9LVmhZTXlZeEpXYU9sRzlkU3ZuWnd6ZHdPZkN0amJBaE03OXFFOTVIVk9vd3hxQUhfYWROYkticXlocHdtcVl6QUJhdjhTVGxuVkFnR0hrbzNvUTB4NG56dXBXWFBzV0FtVUlHZHY5MHpsRW9RbUFuX0RGYzA4em1KTi0tdWY4Smpqc2g1OUhfSjI5WkFPT2pwZ0dCaEdpSFVDLWxWMWZLYmtoX0duV2JrZGxMdUJ0VXNxSThzZDZhWmFPWkdSV0xNcUJMeWhHTnpiOGlXcjNpTnp3TXNPVDlwMW9CWFdwNnJyUjFsTVBITVg1bm9hUU5KVExxZVFEZ2kzSXdfWnNoc1RGVlk2REUyOHFKNzhrNjFNZjRsOHNLd29GU2MzM2J1bXY4ZEo5X3NsNl9QdksyZVdWV3JTUklOUERTOGhacXA3UGZaV2RDN19VRXJhZGhCTGRyWUF3anBETTlSVklla0FfOEg5YVRyVkM0SDdtQ0ZLZW03R0o3VGVYaFRiQnhFNDZxckNzbDJSdnc5VmRPNEJnTEhnanNpQnRsRWhYZzRrcWVDelNwUmh6RkZHNDdfUzdkNndrV0RBMXNYdDhGQ0ExU3VJNTlsNWVTZEsyLUNoNXFEZFpONEdsUlFjZU44blBEVkRJRGwyXzg5bTZyMDB3R2cxQ2wxaS1XSnlIbEQ2NG9QbS1FUG5pNHV6R2hlZkZSZWhPUm9HVnI1aHJYbkhtc1ZBNlcxWkhYN19SdXIydkV2cHg3enNHMlNSYkJ2QTVJWUtZRDNsU2Z5N01vdmdKbEpES2FYWDlZV21kbGZrbUx3LUZUemZTRzJJc1pYR3U0d2pxb2lNRHQzUTdqWGYyVlVjLXJoSVVnYkl0LUwwMlhlcUJsYmRjWVNTcU9nUGRXSEp4VzhMTHVjUkhLZEtqdU1sV0RITklwQ3NCVGhMV2tvMG03MlRScjd1c0QxUUhjY0huQ0JaTllsV1JEeEdEYjhPSVQ5MFowZmdBaUJLWW1pdHlLSlE5LUJyMWl1T25rTExKM2I4dUNLZWxSVTljZGlZOHV4YU5CSm1vX0J4ZldLU3ZQaWdJUkN4RTNSU1FZZ3dDcnB5OTNOVEZyUEFTcERUandCYXhmWElaTFdrTFlEM0kwQU85aHJBS0tQbnFvc2lzUnh1ZWhaTUdwbmZHUkhyU3E3VU9LSFhjIiwidGFnIjoicWF4NlAzQXI4ejIwYTAxOHZ0bDc4ZyJ9`
    const jwe = Buffer.from(encryptedMessage, 'base64').toString('utf-8');

    console.log(jwe);

    const agreementKey = await getDerivedAgreementKey(BOB_KEY_PAIR_DOC);

    console.log(agreementKey);

    const resolver = () => getKaKInstanceFromDocument(agreementKey)
    const result = await didcommDecrypt(JSON.parse(jwe), agreementKey, resolver);


    console.log(result);

    expect(result).toBeDefined();
  });
});
